Imports OfficeOpenXml
Imports System.IO
Imports log4net
Imports System.Web.Script.Serialization


Public Class Processor

    Private Shared ReadOnly logger As ILog = log4net.LogManager.GetLogger(GetType(Processor))

    Private package As ExcelPackage = Nothing

    Sub New()

    End Sub

    Public Function parseVirExpressFile(ByVal filesStatus As ViewDataUploadFilesResult) As IList(Of ProcessResult)

        logger.Debug("parseVirExpressFile - Begin ")

        Dim result As List(Of ProcessResult) = New List(Of ProcessResult)

        Dim dt As VirExpressModelDataTables = Nothing

        Dim fileName As String = filesStatus.FullName

        logger.Debug("parseIntMvtExterne - fileName " & fileName)

        If String.IsNullOrEmpty(fileName) Then
            Throw New Exception("Impossible de trouver le nom du fichier, vérifiez que vous n'avez pas perdu la session !")
        End If

        dt = GetFileDataTable(fileName)

        Dim mntHeader As Decimal = dt.Entete.Rows(0).Field(Of Decimal)(6)

        Dim mntSumDetails As Decimal = dt.Details.Compute("Sum(mntDetailsHeader)", "")

        If mntHeader <> mntSumDetails Then
            result.Add(New ProcessResult() With { _
                       .Controles = 1, _
                       .ControlesDescription = "Contôle du montant globale du virement", _
                       .ControlesResultat = False,
                       .DetailAnomalies = "Le montant globale ne correspond pas à la somme des montants détails, différence observée " & Math.Abs((mntHeader - mntSumDetails)).ToString
            })
        End If

        processHeader(dt.Entete, result)

        processDetails(dt.Details, result)

        Return result

    End Function

    Public Function processData(ByVal filesStatus As ViewDataUploadFilesResult) As ViewDataUploadFilesResult

        logger.Debug("processData - Begin ")

        Dim fileName As String = filesStatus.Name

        logger.Debug("parseIntMvtExterne - fileName " & fileName)

        Try

            Using package As ExcelPackage = New ExcelPackage()

                logger.Debug("processData - new package ")

                package.Load(New IO.FileInfo(fileName).OpenRead)

                logger.Debug("processData - opened ")

                Try

                    Dim ws As ExcelWorksheet = package.Workbook.Worksheets(1)

                    logger.Debug("parseIntMvtExterne - ws ")

                    If ws.Dimension IsNot Nothing Then

                        ' Dim dt As DataTable = LoadInDataTable(ws)

                        'logger.Debug("parseIntMvtExterne - dt Loaded ")

                        'filesStatus.TextFileName = "MvtCompta.txt"
                        'filesStatus.DeltaFileName = "MvtCompta.unl"

                        'Dim sWriter As StreamWriter = Utils.getWriter(StorageRoot() & filesStatus.TextFileName)

                        'For line = 2 To ws.Dimension.End.Row
                        '    Dim lineString As String = getLine(line, ws)
                        '    If Not Utils.writeLine(sWriter, lineString, line = ws.Dimension.End.Row) Then
                        '        Exit For
                        '    End If
                        'Next
                        'sWriter.Close()
                        'sWriter.Dispose()



                    End If

                    logger.Debug("processData - End Using ")
                Catch ex As Exception

                    logger.Warn(ex.Message)
                    Throw ex
                End Try

                package.Stream.Close()
                package.Dispose()

            End Using

        Catch ex As Exception

            If ex.Message.Contains("Can not open the package. Package is an OLE compound document") Then
                Throw New Exception("Les fichier excel 2003 ne sont pas pris en charge, veuillez enregistrer le fichier sous le format 2007 - xlsx - et réessayer !")
            Else
                logger.Warn(ex.Message)
                If ex.InnerException IsNot Nothing Then
                    logger.Warn(ex.InnerException.Message)
                End If
                Throw ex
            End If

        End Try


        logger.Debug("processData - End ")
        Return filesStatus

    End Function



    Public Function GetNbAbsenceDco(ByVal dt As DataTable) As Integer
        Dim expression As String = "dco is null OR LEN(TRIM([dco])) = 0"
        Return dt.Select(expression).Length
    End Function

    Public Function GetNbDiffDco(ByVal dt As DataTable) As Integer
        Dim expression As String = "dco <> '" & Date.Now.ToString("dd/MM/yyyy") & "'"
        Return dt.Select(expression).Length
    End Function

    Public Function GetBalanceGenerale(ByVal dt As DataTable) As Decimal
        Dim totalDebit As Decimal = dt.Compute("SUM(mon)", "sen = 'D'")
        Dim totalCredit As Decimal = dt.Compute("SUM(mon)", "sen = 'C'")
        Return totalDebit - totalCredit
    End Function

    Public Function Get2DigitReport(ByVal dt As DataTable) As Integer

        Dim digitsObject As IEnumerable = (From row In dt.AsEnumerable
                 Select New With {.montant = row.Field(Of Decimal)("mon") * 100, _
                                  .entier = Math.Truncate(row.Field(Of Decimal)("mon") * 100), _
                                  .digits = (row.Field(Of Decimal)("mon") * 100) - Math.Truncate(row.Field(Of Decimal)("mon") * 100)}).AsEnumerable

        Dim nbdigits As Integer = (From item In digitsObject
                                   Where item.digits <> 0
                                   Select item).Count
        Return nbdigits

    End Function

    Public Function GetBalanceAgence(ByVal dt As DataTable) As Integer
        Dim dtBalanceAgence As DataTable = New DataTable()
        dtBalanceAgence.Columns.Add(New DataColumn("age", System.Type.GetType("System.String")))
        dtBalanceAgence.Columns.Add(New DataColumn("balAgence", System.Type.GetType("System.Decimal")))

        Dim queryGroupByAgeSen = (From row In dt.AsEnumerable()
                    Group row By grpKey = New With { _
                     Key .age = row.Field(Of String)("age")
                     } Into grp = Group
                Select dtBalanceAgence.LoadDataRow(New Object() { _
                        grpKey.age, _
                        grp.Where(Function(r) "D".Equals(r.Field(Of String)("sen"))).Sum(Function(r) r.Field(Of Decimal)("mon")) - grp.Where(Function(r) "C".Equals(r.Field(Of String)("sen"))).Sum(Function(r) r.Field(Of Decimal)("mon"))
                    }, False)).CopyToDataTable()


        Dim expressionBalanceParAgence As String = "balAgence is null OR balAgence <> 0"
        Dim balanceAgenceList As IList(Of DataRow) = dtBalanceAgence.Select(expressionBalanceParAgence)
        Return balanceAgenceList.Count

    End Function

    Public Function GetBalanceAgenceAsDataTable(ByVal dt As DataTable) As DataTable
        Dim dtBalanceAgence As DataTable = New DataTable()
        dtBalanceAgence.Columns.Add(New DataColumn("FieldName", System.Type.GetType("System.String")))
        dtBalanceAgence.Columns.Add(New DataColumn("FieldValue", System.Type.GetType("System.Decimal")))
        dtBalanceAgence.Columns.Add(New DataColumn("FieldNameHeader", System.Type.GetType("System.String")))

        Dim queryGroupByAge = (From row In dt.AsEnumerable()
                    Group row By grpKey = New With { _
                     Key .age = row.Field(Of String)("age")
                     } Into grp = Group
                Select dtBalanceAgence.LoadDataRow(New Object() { _
                        grpKey.age, _
                        grp.Where(Function(r) "D".Equals(r.Field(Of String)("sen"))).Sum(Function(r) r.Field(Of Decimal)("mon")) - grp.Where(Function(r) "C".Equals(r.Field(Of String)("sen"))).Sum(Function(r) r.Field(Of Decimal)("mon")), _
                        "Agence"
                    }, False)).CopyToDataTable()


        Dim expressionBalanceParAgence As String = "FieldValue is null OR FieldValue <> 0"
        Return dtBalanceAgence.Select(expressionBalanceParAgence).CopyToDataTable
    End Function

    Public Function GetBalanceDevise(ByVal dt As DataTable) As Integer
        Dim dtBalanceDevise As DataTable = New DataTable()
        dtBalanceDevise.Columns.Add(New DataColumn("dev", System.Type.GetType("System.String")))
        dtBalanceDevise.Columns.Add(New DataColumn("balDevise", System.Type.GetType("System.Decimal")))


        Dim queryGroupByDev = (From row In dt.AsEnumerable()
                    Group row By grpKey = New With { _
                     Key .dev = row.Field(Of String)("dev")
                     } Into grp = Group
                Select dtBalanceDevise.LoadDataRow(New Object() { _
                        grpKey.dev, _
                        grp.Where(Function(r) "D".Equals(r.Field(Of String)("sen"))).Sum(Function(r) r.Field(Of Decimal)("mon")) - grp.Where(Function(r) "C".Equals(r.Field(Of String)("sen"))).Sum(Function(r) r.Field(Of Decimal)("mon"))
            }, False)).CopyToDataTable()


        Dim expressionBalanceParDevise As String = "balDevise is null OR balDevise <> 0"
        Dim balanceDeviseList As IList(Of DataRow) = dtBalanceDevise.Select(expressionBalanceParDevise)
        Return balanceDeviseList.Count
    End Function

    Public Function GetBalanceDeviseAsDataTable(ByVal dt As DataTable) As DataTable
        Dim dtBalanceDevise As DataTable = New DataTable()
        dtBalanceDevise.Columns.Add(New DataColumn("FieldName", System.Type.GetType("System.String")))
        dtBalanceDevise.Columns.Add(New DataColumn("FieldValue", System.Type.GetType("System.Decimal")))
        dtBalanceDevise.Columns.Add(New DataColumn("FieldNameHeader", System.Type.GetType("System.String")))

        Dim queryGroupByDev = (From row In dt.AsEnumerable()
                    Group row By grpKey = New With { _
                     Key .dev = row.Field(Of String)("dev")
                     } Into grp = Group
                Select dtBalanceDevise.LoadDataRow(New Object() { _
                        grpKey.dev, _
                        grp.Where(Function(r) "D".Equals(r.Field(Of String)("sen"))).Sum(Function(r) r.Field(Of Decimal)("mon")) - grp.Where(Function(r) "C".Equals(r.Field(Of String)("sen"))).Sum(Function(r) r.Field(Of Decimal)("mon")), _
                        "Devise"
                    }, False)).CopyToDataTable()


        Dim expressionBalanceParDevise As String = "FieldValue is null OR FieldValue <> 0"
        Return dtBalanceDevise.Select(expressionBalanceParDevise).CopyToDataTable

    End Function

    Public Function GetBalancePiece(ByVal dt As DataTable) As Integer
        Dim dtBalancePiece As DataTable = New DataTable()
        dtBalancePiece.Columns.Add(New DataColumn("pie", System.Type.GetType("System.String")))
        dtBalancePiece.Columns.Add(New DataColumn("balPiece", System.Type.GetType("System.Decimal")))


        Dim queryGroupByPie = (From row In dt.AsEnumerable()
                    Group row By grpKey = New With { _
                     Key .dev = row.Field(Of String)("pie")
                     } Into grp = Group
                Select dtBalancePiece.LoadDataRow(New Object() { _
                        grpKey.dev, _
                        grp.Where(Function(r) "D".Equals(r.Field(Of String)("sen"))).Sum(Function(r) r.Field(Of Decimal)("mon")) - grp.Where(Function(r) "C".Equals(r.Field(Of String)("sen"))).Sum(Function(r) r.Field(Of Decimal)("mon"))
            }, False)).CopyToDataTable()


        Dim expressionBalanceParPiece As String = "balPiece is null OR balPiece <> 0"
        Dim balancePieceList As IList(Of DataRow) = dtBalancePiece.Select(expressionBalanceParPiece)
        Return balancePieceList.Count

    End Function

    Public Function GetBalancePieceAsDataTable(ByVal dt As DataTable) As DataTable
        Dim dtBalancePiece As DataTable = New DataTable()
        dtBalancePiece.Columns.Add(New DataColumn("FieldName", System.Type.GetType("System.String")))
        dtBalancePiece.Columns.Add(New DataColumn("FieldValue", System.Type.GetType("System.Decimal")))
        dtBalancePiece.Columns.Add(New DataColumn("FieldNameHeader", System.Type.GetType("System.String")))

        Dim queryGroupByPie = (From row In dt.AsEnumerable()
                    Group row By grpKey = New With { _
                     Key .dev = row.Field(Of String)("pie")
                     } Into grp = Group
                Select dtBalancePiece.LoadDataRow(New Object() { _
                        grpKey.dev, _
                        grp.Where(Function(r) "D".Equals(r.Field(Of String)("sen"))).Sum(Function(r) r.Field(Of Decimal)("mon")) - grp.Where(Function(r) "C".Equals(r.Field(Of String)("sen"))).Sum(Function(r) r.Field(Of Decimal)("mon")), _
                        "Pièce"
                    }, False)).CopyToDataTable()


        Dim expressionBalanceParPiece As String = "FieldValue is null OR FieldValue <> 0"
        Return dtBalancePiece.Select(expressionBalanceParPiece).CopyToDataTable
    End Function

    Public Function GetNVC(ByVal url As String) As NameValueCollection

        Dim nvc As NameValueCollection = New NameValueCollection()

        Dim queries As String = String.Empty
        If url.Contains("?") Then
            queries = url.Substring(url.IndexOf("?") + 1)
        End If

        For Each keyVal As String In Regex.Split(queries, "&")
            Dim singlePair As String() = Regex.Split(keyVal, "=")
            If singlePair.Length = 2 Then
                nvc.Add(singlePair(0), singlePair(1))
            Else
                nvc.Add(singlePair(0), String.Empty)
            End If
        Next
        Return nvc
    End Function

    Public Function GetFileDataTable(ByVal fileName As String) As VirExpressModelDataTables

        Dim virDTS As VirExpressModelDataTables = Nothing
        package = New ExcelPackage()

        Try
            logger.Debug("parseIntMvtExterne - new package ")
            package.Load(New IO.FileInfo(fileName).OpenRead)
            logger.Debug("parseIntMvtExterne - opened ")
            Dim ws As ExcelWorksheet = package.Workbook.Worksheets(1)
            If ws.Dimension IsNot Nothing Then
                ws.Column(15).Style.Numberformat.Format = "#,##0.00000"
                logger.Debug("parseIntMvtExterne - dimension ")
                virDTS = LoadInDataTable(ws)
                'virDTS.Details.Compute("Sum(Montant)","")
                logger.Debug("parseIntMvtExterne - dt Loaded ")
            End If
            logger.Debug("parseIntMvtExterne - ws ")

        Catch ex As Exception

            If ex.Message.Contains("Can not open the package. Package is an OLE compound document") Then
                Throw New Exception("Les fichier excel 2003 ne sont pas pris en charge, veuillez enregistrer le fichier sous le format 2007 - xlsx - et réessayer !")
            Else
                logger.Warn(ex.Message)
                If ex.InnerException IsNot Nothing Then
                    logger.Warn(ex.InnerException.Message)
                End If
                Throw ex
            End If

        Finally

            package.Stream.Close()
            package.Dispose()
            package = Nothing

        End Try

        Return virDTS

    End Function

    Public Function LoadInDataTable(ByVal ws As ExcelWorksheet) As VirExpressModelDataTables

        Dim dt As New VirExpressModelDataTables()
        Dim hasHeader = True
        Dim monHeadColNumber As Int32 = 7
        Dim monDetailsColNumber As Int32 = 7
        Try

            ' Lecture de l'entete
            For Each firstRowCell In ws.Cells("A1:I1")
                dt.Entete.Columns.Add(
                    If(hasHeader,
                       IIf(firstRowCell.Start.Column = 7, "mntHeader", firstRowCell.Text),
                       String.Format("Column {0}", firstRowCell.Start.Column)), IIf(firstRowCell.Start.Column = 7, GetType(System.Decimal), GetType(System.String)))
            Next

            Dim wsRow = ws.Cells("A2:I2")

            Dim row = dt.Entete.NewRow()
            For Each cell In wsRow
                If (cell.Start.Column) = monHeadColNumber Then
                    row(cell.Start.Column - 1) = Decimal.Parse(cell.Text, Globalization.NumberStyles.Any)
                Else
                    row(cell.Start.Column - 1) = cell.Text
                End If
            Next
            dt.Entete.Rows.Add(row)


            ' Lecture du détails

            For Each firstRowCell In ws.Cells("B6:H6")
                dt.Details.Columns.Add(
                    If(hasHeader,
                       IIf(firstRowCell.Start.Column = 7, "mntDetailsHeader", firstRowCell.Text),
                       String.Format("Column {0}", firstRowCell.Start.Column)), IIf(firstRowCell.Start.Column = 7, GetType(System.Decimal), GetType(System.String)))
            Next

            For rowNum = 7 To ws.Dimension.End.Row
                wsRow = ws.Cells(rowNum, 2, rowNum, 8)
                row = dt.Details.NewRow()
                For Each cell In wsRow
                    If (cell.Start.Column) = monDetailsColNumber Then
                        row(cell.Start.Column - 2) = Decimal.Parse(cell.Text, Globalization.NumberStyles.Any)
                    Else
                        row(cell.Start.Column - 2) = cell.Text
                    End If
                Next
                dt.Details.Rows.Add(row)
            Next

            Return dt

        Catch ex As Exception

            ws.SelectedRange.Dispose()
            Throw ex

        End Try


    End Function

    Private Sub processHeader(dataTable As DataTable, result As List(Of ProcessResult))
        Throw New NotImplementedException
    End Sub

    Private Sub processDetails(dataTable As DataTable, result As List(Of ProcessResult))
        Throw New NotImplementedException
    End Sub




End Class

